<h1 id="module">Module</h1>

<p>This is the base class for all Modules defined in the nn package.</p>
<pre class="highlight python"><code><span class="c"># .parameters()</span>
</code></pre>
<pre class="highlight python"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">():</span>
<span class="o">&gt;&gt;&gt;</span>     <span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">param</span><span class="o">.</span><span class="n">data</span><span class="p">),</span> <span class="n">param</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="s">'&gt; (20L,)</span><span class="err">
</span><span class="s">&lt;class '</span><span class="n">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="s">'&gt; (20L, 1L, 5L, 5L)</span><span class="err">
</span></code></pre>
<pre class="highlight python"><code></code></pre>
<pre class="highlight python"><code><span class="c"># .parameter_dict()</span>
</code></pre>
<pre class="highlight python"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">pdict</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">parameter_dict</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">pdict</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="p">[</span><span class="s">'bias'</span><span class="p">,</span> <span class="s">'weight'</span><span class="p">]</span>
</code></pre>
<pre class="highlight python"><code></code></pre>

<p>Even the Container class derives from this class.</p>

<p>An nn.Module has the following interface:</p>

<p><strong>Constructor:</strong>
   nn.Module(**parameters)</p>

<p>All arguments passed in to the constructor need to be of type 
nn.Parameter or a Tensor.</p>

<p><strong>forward(&hellip;)</strong></p>

<p>This is the function that one defines when subclassing to create
their own modules.
It takes in inputs and returns outputs.</p>

<p><strong><strong>call</strong>(&hellip;)</strong></p>

<p>This calls the forward function, as well as the hooks</p>

<p><strong>register_buffer(name, tensor)</strong></p>

<p>This is typically used to register a buffer that is not a Parameter.
For example, in BatchNorm, the running_mean is a buffer, so one would
register it in the constructor of BatchNorm with:</p>

<p><code class="prettyprint">self.register_buffer(&#39;running_mean&#39;, torch.zeros(num_features))</code></p>

<p>The registered buffers can simply be accessed as class members
when needed.</p>

<p><strong>cpu()</strong></p>

<p>Recursively moves all it&rsquo;s parameters and buffers to the CPU</p>

<p><strong>cuda(device_id=None)</strong>
Recursively moves all it&rsquo;s parameters and buffers to the CUDA memory.
If device_id is given, moves it to GPU number device_id</p>

<p><strong>float()</strong>
Typecasts the parameters and buffers to float</p>

<p><strong>double()</strong>
Typecasts the parameters and buffers to double</p>

<p><strong>register_forward_hook(name, hook)</strong></p>

<p>This will register a user-defined closure on the module.
Whenever the module finishes it&rsquo;s forward operation,
the user closure is called.
The signature of the closure is <code class="prettyprint">def closure(input, output)</code></p>

<p><strong>register_backward_hook(name, hook)</strong></p>

<p>This will register a user-defined closure on the module.
Whenever the module finishes it&rsquo;s backward operation,
the user closure is called.
The signature of the closure is <code class="prettyprint">def closure(gradOutput, gradInput)</code></p>

<p><strong>remove_forward_hook(name)</strong></p>

<p>Removes a registered forward hook with the given name</p>

<p><strong>remove_backward_hook(name)</strong></p>

<p>Removes a registered backward hook with the given name</p>

<p><strong><code class="prettyprint">[generator] parameters()</code></strong></p>

<p>returns a generator over all learnable parameters in the container instance. 
This can typically be passed to the optimizer API</p>

<p><strong><code class="prettyprint">[dict] parameter_dict()</code></strong></p>

<p>returns a dictionary of learnable parameters of the Module.
For example: [&lsquo;weight&rsquo; : Parameter(torch.FloatTensor(20x1x5x5)),
              &#39;bias&rsquo;   : Parameter(torch.FloatTensor(20)),
             ]</p>

<p><strong><code class="prettyprint">load_parameter_dict(dict)</code></strong></p>

<p>Given a parameter dict, sets the parameters of self to be the given dict.</p>

<p><strong><code class="prettyprint">train()</code></strong></p>

<p>Sets the Container to training mode (for modules such as batchnorm, dropout etc.)</p>

<p><strong><code class="prettyprint">eval()</code></strong></p>

<p>Sets the Container to evaluate mode (for modules such as batchnorm, dropout etc.)</p>

<p><strong><code class="prettyprint">zero_grad()</code></strong></p>

<p>Zeroes the gradients of each Parameter of the module</p>

<h1 id="container">Container</h1>

<p>This is the base container class for all neural networks you would define.</p>
<pre class="highlight python"><code><span class="c"># Example of using Container</span>
 <span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Container</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">Net</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span>
            <span class="n">conv1</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
            <span class="n">relu</span>  <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">()</span>
         <span class="p">)</span>
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">input</span><span class="p">):</span>
        <span class="n">output</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">conv1</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">output</span>
 <span class="n">model</span> <span class="o">=</span> <span class="n">Net</span><span class="p">()</span>
</code></pre>
<pre class="highlight python"><code><span class="c"># one can add modules to the container after construction</span>
<span class="n">model</span><span class="o">.</span><span class="n">add_module</span><span class="p">(</span><span class="s">'pool1'</span><span class="p">,</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</code></pre>
<pre class="highlight python"><code></code></pre>
<pre class="highlight python"><code><span class="c"># .parameters()</span>
</code></pre>
<pre class="highlight python"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">():</span>
<span class="o">&gt;&gt;&gt;</span>     <span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">param</span><span class="o">.</span><span class="n">data</span><span class="p">),</span> <span class="n">param</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="s">'&gt; (20L,)</span><span class="err">
</span><span class="s">&lt;class '</span><span class="n">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="s">'&gt; (20L, 1L, 5L, 5L)</span><span class="err">
</span></code></pre>
<pre class="highlight python"><code></code></pre>
<pre class="highlight python"><code><span class="c"># .parameter_dict()</span>
</code></pre>
<pre class="highlight python"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">pdict</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">parameter_dict</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">pdict</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="p">[</span><span class="s">'conv1.bias'</span><span class="p">,</span> <span class="s">'conv1.weight'</span><span class="p">]</span>
</code></pre>
<pre class="highlight python"><code></code></pre>

<p>You will subclass your container from this class.
In the constructor you define the modules that you would want to use,
and in the &ldquo;forward&rdquo; function you use the constructed modules in
your operations.</p>

<p>To make it easier to understand, given is a small example.</p>

<p>One can also add new modules to a container after construction.
You can do this with the add_module function 
or by assigning them as Container attributes.</p>

<h2 id="one-can-also-set-modules-as-attributes-of-the-container">one can also set modules as attributes of the container</h2>

<p>model.conv1 = nn.Conv2d(12, 24, 3)
The container has some important additional methods: </p>

<p><strong><code class="prettyprint">[generator] parameters()</code></strong></p>

<p>returns a generator over all learnable parameters in the container instance. 
This can typically be passed to the optimizer API</p>

<p><strong><code class="prettyprint">[dict] parameter_dict()</code></strong></p>

<p>returns a dictionary of learnable parameters of the Container.
For example: [&#39;conv1.weight&rsquo; : Parameter(torch.FloatTensor(20x1x5x5)),
              &#39;conv1.bias&rsquo;   : Parameter(torch.FloatTensor(20)),
             ]</p>

<p><strong><code class="prettyprint">load_parameter_dict(dict)</code></strong></p>

<p>Given a parameter dict, sets the parameters of self to be the given dict.
It loads loads the parameters recursively.
Excessive or non-matching parameter names are ignored.
For example, the input dict has an entry &#39;conv44.weight&rsquo;, but 
if the container does not have a module named &#39;conv44&rsquo;, then this entry is ignored.</p>

<p><strong><code class="prettyprint">children()</code></strong></p>

<p>Returns a generator over all the children modules of self</p>

<p><strong><code class="prettyprint">train()</code></strong></p>

<p>Sets the Container (and all it&rsquo;s child modules) to training mode (for modules such as batchnorm, dropout etc.)</p>

<p><strong><code class="prettyprint">eval()</code></strong></p>

<p>Sets the Container (and all it&rsquo;s child modules) to evaluate mode (for modules such as batchnorm, dropout etc.)</p>

<p><strong><code class="prettyprint">apply(closure)</code></strong></p>

<p>Applies the given closure to each parameter of the container. </p>

<p><strong>_<em>Note: Apart from these, the container will define the base functions that it has derived from nn.Module _</em></strong></p>
