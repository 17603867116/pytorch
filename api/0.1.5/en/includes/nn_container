<h2 id="containers">Containers</h2>

<h3 id="container">Container</h3>

<p>This is the base container class for all neural networks you would define.</p>
<pre class="highlight python"><code><span class="c"># Example of using Container</span>
 <span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Container</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">Net</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span>
            <span class="n">conv1</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
            <span class="n">relu</span>  <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">()</span>
         <span class="p">)</span>
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">input</span><span class="p">):</span>
        <span class="n">output</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">conv1</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">output</span>
 <span class="n">model</span> <span class="o">=</span> <span class="n">Net</span><span class="p">()</span>
</code></pre>
<pre class="highlight python"><code><span class="c"># one can add modules to the container after construction</span>
<span class="n">model</span><span class="o">.</span><span class="n">add_module</span><span class="p">(</span><span class="s">'pool1'</span><span class="p">,</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</code></pre>
<pre class="highlight python"><code></code></pre>
<pre class="highlight python"><code><span class="c"># .parameters()</span>
</code></pre>
<pre class="highlight python"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">():</span>
<span class="o">&gt;&gt;&gt;</span>     <span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">param</span><span class="o">.</span><span class="n">data</span><span class="p">),</span> <span class="n">param</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="s">'&gt; (20L,)</span><span class="err">
</span><span class="s">&lt;class '</span><span class="n">torch</span><span class="o">.</span><span class="n">FloatTensor</span><span class="s">'&gt; (20L, 1L, 5L, 5L)</span><span class="err">
</span></code></pre>
<pre class="highlight python"><code></code></pre>
<pre class="highlight python"><code><span class="c"># .parameter_dict()</span>
</code></pre>
<pre class="highlight python"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">pdict</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">parameter_dict</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">pdict</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
<span class="p">[</span><span class="s">'conv1.bias'</span><span class="p">,</span> <span class="s">'conv1.weight'</span><span class="p">]</span>
</code></pre>
<pre class="highlight python"><code></code></pre>

<p>You will subclass your container from this class.
In the constructor you define the modules that you would want to use,
and in the &ldquo;forward&rdquo; function you use the constructed modules in
your operations.</p>

<p>To make it easier to understand, given is a small example.</p>

<p>One can also add new modules to a container after construction.
You can do this with the add_module function 
or by assigning them as Container attributes.</p>

<h4 id="one-can-also-set-modules-as-attributes-of-the-container">one can also set modules as attributes of the container</h4>

<p>model.conv1 = nn.Conv2d(12, 24, 3)
The container has some important additional methods: </p>

<p><strong><code class="prettyprint">[generator] parameters()</code></strong></p>

<p>returns a generator over all learnable parameters in the container instance. 
This can typically be passed to the optimizer API</p>

<p><strong><code class="prettyprint">[dict] parameter_dict()</code></strong></p>

<p>returns a dictionary of learnable parameters of the Container.
For example: [&lsquo;conv1.weight&rsquo; : Parameter(torch.FloatTensor(20x1x5x5)),
              &#39;conv1.bias&rsquo;   : Parameter(torch.FloatTensor(20)),
             ]</p>

<p><strong><code class="prettyprint">load_parameter_dict(dict)</code></strong></p>

<p>Given a parameter dict, sets the parameters of self to be the given dict.
It loads loads the parameters recursively.
Excessive or non-matching parameter names are ignored.
For example, the input dict has an entry &#39;conv44.weight&rsquo;, but 
if the container does not have a module named &#39;conv44&rsquo;, then this entry is ignored.</p>

<p><strong><code class="prettyprint">children()</code></strong></p>

<p>Returns a generator over all the children modules of self</p>

<p><strong><code class="prettyprint">train()</code></strong></p>

<p>Sets the Container (and all it&rsquo;s child modules) to training mode (for modules such as batchnorm, dropout etc.)</p>

<p><strong><code class="prettyprint">eval()</code></strong></p>

<p>Sets the Container (and all it&rsquo;s child modules) to evaluate mode (for modules such as batchnorm, dropout etc.)</p>

<p><strong><code class="prettyprint">apply(closure)</code></strong></p>

<p>Applies the given closure to each parameter of the container. </p>

<p><strong>_<em>Note: Apart from these, the container will define the base functions that it has derived from nn.Module _</em></strong></p>

<h3 id="sequential">Sequential</h3>

<p>A sequential Container. It is derived from the base nn.Container class</p>
<pre class="highlight python"><code><span class="c"># Example of using Sequential</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
          <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span>
          <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span>
          <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span>
          <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">()</span>
        <span class="p">)</span>
</code></pre>
<pre class="highlight python"><code></code></pre>

<p>Modules will be added to it in the order they are passed in the constructor.
Alternatively, an ordered dict of modules can also be passed in.</p>

<p>To make it easier to understand, given is a small example.</p>

<h4 id="example-of-using-sequential-with-ordereddict">Example of using Sequential with OrderedDict</h4>

<p>model = nn.Sequential(OrderedDict([
          (&#39;conv1&rsquo;, nn.Conv2d(1,20,5)),
          (&#39;relu1&rsquo;, nn.ReLU()),
          (&#39;conv2&rsquo;, nn.Conv2d(20,64,5)),
          (&#39;relu2&rsquo;, nn.ReLU())
        ]))</p>
