<h2 id="non-linearities">Non-linearities</h2>

<h3 id="relu">ReLU</h3>

<p>Applies the rectified linear unit function element-wise ReLU(x)= max(0,x)</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>inplace</td>
<td></td>
<td>can optionally do the operation in-place</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/relu.png" ></p>

<h3 id="relu6">ReLU6</h3>

<p>Applies the element-wise function ReLU6(x) = min( max(0,x), 6)</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU6</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>inplace</td>
<td></td>
<td>can optionally do the operation in-place</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/relu6.png" ></p>

<h3 id="threshold">Threshold</h3>

<p>Thresholds each element of the input Tensor</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Threshold</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>Threshold is defined as:
     y =  x        if x &gt;= threshold
          value    if x &lt;  threshold</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>threshold</td>
<td></td>
<td>The value to threshold at</td>
</tr>
<tr>
<td>value</td>
<td></td>
<td>The value to replace with</td>
</tr>
<tr>
<td>inplace</td>
<td></td>
<td>can optionally do the operation in-place</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>Tensor of same dimension and shape as the input</p>

<h3 id="hardtanh">Hardtanh</h3>

<p>Applies the HardTanh function element-wise</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">HardTanh</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>HardTanh is defined as:
   f(x) = +1, if x  &gt;  1
   f(x) = -1, if x  &lt; -1
   f(x) =  x,  otherwise
The range of the linear region [-1, 1] can be adjusted</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>min_value</td>
<td></td>
<td>minimum value of the linear region range</td>
</tr>
<tr>
<td>max_value</td>
<td></td>
<td>maximum value of the linear region range</td>
</tr>
<tr>
<td>inplace</td>
<td></td>
<td>can optionally do the operation in-place</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/htanh.png" ></p>

<h3 id="sigmoid">Sigmoid</h3>

<p>Applies the element-wise function sigmoid(x) = 1 / ( 1 + exp(-x))</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sigmoid</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/sigmoid.png" ></p>

<h3 id="tanh">Tanh</h3>

<p>Applies element-wise, Tanh(x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x))</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Tanh</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/tanh.png" ></p>

<h3 id="elu">ELU</h3>

<p>Applies element-wise, ELU(x) = max(0,x) + min(0, alpha * (exp(x) - 1))</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ELU</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>alpha</td>
<td>1.0</td>
<td>the alpha value for the ELU formulation.</td>
</tr>
<tr>
<td>inplace</td>
<td></td>
<td>can optionally do the operation in-place</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/elu.png" ></p>

<h3 id="leakyrelu">LeakyReLU</h3>

<p>Applies element-wise, f(x) = max(0, x) + negative_slope * min(0, x)</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">LeakyReLU</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>negative_slope</td>
<td>1e-2</td>
<td>Controls the angle of the negative slope.</td>
</tr>
<tr>
<td>inplace</td>
<td></td>
<td>can optionally do the operation in-place</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<h3 id="logsigmoid">LogSigmoid</h3>

<p>Applies element-wise LogSigmoid(x) = log( 1 / (1 + exp(-x_i)))</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">LogSigmoid</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/logsigmoid.png" ></p>

<h3 id="softplus">Softplus</h3>

<p>Applies element-wise SoftPlus(x) = 1/beta * log(1 + exp(beta * x_i))</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Softplus</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>SoftPlus is a smooth approximation to the ReLU function and can be used
to constrain the output of a machine to always be positive.
For numerical stability the implementation reverts to the linear function
for inputs above a certain value.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>beta</td>
<td>1</td>
<td>the beta value for the Softplus formulation.</td>
</tr>
<tr>
<td>threshold</td>
<td>20</td>
<td>values above this revert to a linear function.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/softplus.png" ></p>

<h3 id="softshrink">Softshrink</h3>

<p>Applies the soft shrinkage function elementwise</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Softshrink</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>SoftShrinkage operator is defined as:
    f(x) = x-lambda, if x &gt; lambda &gt;  f(x) = x+lambda, if x &lt; -lambda
    f(x) = 0, otherwise</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>lambd</td>
<td>0.5</td>
<td>the lambda value for the Softshrink formulation.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/sshrink.png" ></p>

<h3 id="prelu">PReLU</h3>

<p>Applies element-wise the function PReLU(x) = max(0,x) + a * min(0,x)</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">PReLU</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>Here &ldquo;a&rdquo; is a learnable parameter.
When called without arguments, nn.PReLU() uses a single parameter &ldquo;a&rdquo;
across all input channels. If called with nn.PReLU(nChannels), a separate
&ldquo;a&rdquo; is used for each input channel.
Note that weight decay should not be used when learning &ldquo;a&rdquo; for good
performance.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>num_parameters</td>
<td>1</td>
<td>number of &ldquo;a&rdquo; to learn.</td>
</tr>
<tr>
<td>init</td>
<td>0.25</td>
<td>the initial value of &ldquo;a&rdquo;.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/prelu.png" ></p>

<h3 id="softsign">Softsign</h3>

<p>Applies element-wise, the function Softsign(x) = x / (1 + |x|)</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Softsign</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<p><img src="image/softsign.png" ></p>

<h3 id="tanhshrink">Tanhshrink</h3>

<p>Applies element-wise, Tanhshrink(x) = x - Tanh(x)</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Tanhshrink</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>Any</td>
<td>Tensor of any size and dimension</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input</p>

<h3 id="softmin">Softmin</h3>

<p>Applies the Softmin function to an n-dimensional input Tensor</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Softmin</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>rescaling them so that the elements of the n-dimensional output Tensor
lie in the range (0,1) and sum to 1
Softmin(x) = exp(-x_i - shift) / sum_j exp(-x_j - shift)
             where shift = max_i - x_i</p>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * ]</td>
<td>2D Tensor of any size</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input, with
    values in the range [0, 1]</p>

<p><img src="image/softmin.png" ></p>

<h3 id="softmax">Softmax</h3>

<p>Applies the Softmax function to an n-dimensional input Tensor</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Softmax</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>rescaling them so that the elements of the n-dimensional output Tensor
lie in the range (0,1) and sum to 1</p>

<p>Softmax is defined as f_i(x) = exp(x_i - shift) / sum_j exp(x_j - shift)
                      where shift = max_i x_i</p>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * ]</td>
<td>2D Tensor of any size</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input with
    values in the range [0, 1]</p>

<p><img src="image/softmax.png" >
Notes:
    Note that this module doesn&rsquo;t work directly with NLLLoss,
    which expects the Log to be computed between the Softmax and itself.
    Use Logsoftmax instead (it&rsquo;s faster).</p>

<h3 id="softmax2d">Softmax2d</h3>

<p>Applies SoftMax over features to each spatial location</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Softmax2d</span><span class="p">()</span>
<span class="c"># you softmax over the 2nd dimension</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>When given an image of Channels x Height x Width, it will
apply Softmax to each location [Channels, h_i, w_j]</p>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , * , * ]</td>
<td>4D Tensor of any size</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input with
    values in the range [0, 1]</p>

<h3 id="logsoftmax">LogSoftmax</h3>

<p>Applies the Log(Softmax(x)) function to an n-dimensional input Tensor.</p>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">LogSoftmax</span><span class="p">()</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">))</span>
</code></pre>

<p>The LogSoftmax formulation can be simplified as
     f_i(x) = log(1 / a * exp(x_i)) where a = sum_j exp(x_j) .</p>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * ]</td>
<td>2D Tensor of any size</td>
</tr>
<tr>
<td>output</td>
<td>Same</td>
<td>Output has the same shape as input</td>
</tr>
</tbody></table>

<h4 id="returns">Returns</h4>

<p>a Tensor of the same dimension and shape as the input with
    values in the range [-inf, 0)</p>

<p><img src="image/logsoftmax.png" ></p>
