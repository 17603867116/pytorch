<h2 id="pooling-layers">Pooling Layers</h2>

<h3 id="maxpool1d">MaxPool1d</h3>

<p>Applies a 1D max pooling over an input signal composed of several input</p>
<pre class="highlight python"><code><span class="n">The</span> <span class="n">output</span> <span class="n">value</span> <span class="n">of</span> <span class="n">the</span> <span class="n">layer</span> <span class="k">with</span> <span class="nb">input</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">C</span> <span class="n">x</span> <span class="n">W</span><span class="p">)</span> <span class="ow">and</span> <span class="n">output</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">C</span> <span class="n">x</span> <span class="n">oW</span><span class="p">)</span>
<span class="n">can</span> <span class="n">be</span> <span class="n">precisely</span> <span class="n">described</span> <span class="k">as</span><span class="p">:</span>
<span class="n">output</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">c_i</span><span class="p">][</span><span class="n">w_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max_</span><span class="p">{</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">K</span><span class="p">}</span> <span class="nb">input</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">c_i</span><span class="p">][</span><span class="n">stride_w</span> <span class="o">*</span> <span class="n">w_i</span> <span class="o">+</span> <span class="n">k</span><span class="p">)]</span>
</code></pre>
<pre class="highlight python"><code><span class="c"># pool of size=3, stride=2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool1d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the window to take a max over</td>
</tr>
<tr>
<td>stride</td>
<td></td>
<td>the stride of the window</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit padding to be added.</td>
</tr>
<tr>
<td>dilation</td>
<td>kernel_size</td>
<td>a parameter that controls the stride of elements in the window.</td>
</tr>
<tr>
<td>return_indices</td>
<td>False</td>
<td>if True, will return the indices along with the outputs. Useful when Unpooling later.</td>
</tr>
<tr>
<td>ceil_mode</td>
<td></td>
<td>when True, will use &ldquo;ceil&rdquo; instead of &ldquo;floor&rdquo; to compute the output shape</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , * ]</td>
<td>Input is minibatch x channels x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , * ]</td>
<td>Output shape = minibatch x channels x floor((iW  + 2*padW - kernel_size) / stride + 1)</td>
</tr>
</tbody></table>

<h3 id="maxpool2d">MaxPool2d</h3>

<p>Applies a 2D max pooling over an input signal composed of several input</p>
<pre class="highlight python"><code><span class="n">The</span> <span class="n">output</span> <span class="n">value</span> <span class="n">of</span> <span class="n">the</span> <span class="n">layer</span> <span class="k">with</span> <span class="nb">input</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">C</span> <span class="n">x</span> <span class="n">H</span> <span class="n">x</span> <span class="n">W</span><span class="p">)</span> <span class="ow">and</span> <span class="n">output</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">C</span> <span class="n">x</span> <span class="n">oH</span> <span class="n">x</span> <span class="n">oW</span><span class="p">)</span>
<span class="n">can</span> <span class="n">be</span> <span class="n">precisely</span> <span class="n">described</span> <span class="k">as</span><span class="p">:</span>
<span class="n">output</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">c_i</span><span class="p">][</span><span class="n">h_i</span><span class="p">][</span><span class="n">w_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">max_</span><span class="p">{{</span><span class="n">kh</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">KH</span><span class="p">},</span> <span class="p">{</span><span class="n">kw</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">kW</span><span class="p">}}</span> <span class="nb">input</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">c_i</span><span class="p">][</span><span class="n">stride_h</span> <span class="o">*</span> <span class="n">h_i</span> <span class="o">+</span> <span class="n">kH</span><span class="p">)][</span><span class="n">stride_w</span> <span class="o">*</span> <span class="n">w_i</span> <span class="o">+</span> <span class="n">kW</span><span class="p">)]</span>
</code></pre>
<pre class="highlight python"><code><span class="c"># pool of square window of size=3, stride=2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># pool of non-square window</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the window to take a max over. Can be a single number k (for a square kernel of k x k) or a tuple (kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>kernel_size</td>
<td>the stride of the window. Can be a single number s or a tuple (sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit padding to be added. Can be a single number or a tuple.</td>
</tr>
<tr>
<td>dilation</td>
<td>1</td>
<td>a parameter that controls the stride of elements in the window. Can be a single number or a tuple.</td>
</tr>
<tr>
<td>return_indices</td>
<td>False</td>
<td>if True, will return the indices along with the outputs. Useful to pass to nn.MaxUnpool2d .</td>
</tr>
<tr>
<td>ceil_mode</td>
<td></td>
<td>when True, will use &ldquo;ceil&rdquo; instead of &ldquo;floor&rdquo; to compute the output shape</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , *, * ]</td>
<td>Input is minibatch x channels x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , *, * ]</td>
<td>Output shape = minibatch x channels x floor((iH  + 2*padH - kH) / sH + 1) x floor((iW  + 2*padW - kW) / sW + 1)</td>
</tr>
</tbody></table>

<h3 id="maxpool3d">MaxPool3d</h3>

<p>Applies a 3D max pooling over an input signal composed of several input</p>
<pre class="highlight python"><code><span class="c"># pool of square window of size=3, stride=2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool3d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># pool of non-square window</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool3d</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span> <span class="mi">31</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the window to take a max over. Can be a single number k (for a square kernel of k x k x k) or a tuple (kt x kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>kernel_size</td>
<td>the stride of the window. Can be a single number s or a tuple (st x sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit padding to be added. Can be a single number or a tuple.</td>
</tr>
<tr>
<td>dilation</td>
<td>1</td>
<td>a parameter that controls the stride of elements in the window. Can be a single number or a tuple.</td>
</tr>
<tr>
<td>return_indices</td>
<td>False</td>
<td>if True, will return the indices along with the outputs. Useful to pass to nn.MaxUnpool3d .</td>
</tr>
<tr>
<td>ceil_mode</td>
<td></td>
<td>when True, will use &ldquo;ceil&rdquo; instead of &ldquo;floor&rdquo; to compute the output shape</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , *, *, * ]</td>
<td>Input is minibatch x channels x iT x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , *, *, * ]</td>
<td>Output shape = minibatch x channels x floor((iT  + 2*padT - kT) / sT + 1) x floor((iH  + 2*padH - kH) / sH + 1) x floor((iW  + 2*padW - kW) / sW + 1)</td>
</tr>
</tbody></table>

<h3 id="maxunpool2d">MaxUnpool2d</h3>

<p>Computes the inverse operation of MaxPool2d</p>
<pre class="highlight python"><code><span class="c"># pool of square window of size=3, stride=2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">return_indices</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">mu</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxUnpool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
<span class="n">output</span><span class="p">,</span> <span class="n">indices</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="n">unpooled_output</span> <span class="o">=</span> <span class="n">mu</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">indices</span><span class="p">)</span>
<span class="c"># exact output size can be also specified as an argument</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">))</span>
<span class="n">downsample</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">return_indices</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">upsample</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxUnpool2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">h</span><span class="p">,</span> <span class="n">indices</span> <span class="o">=</span> <span class="n">downsample</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">upsample</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">indices</span><span class="p">,</span> <span class="n">output_size</span><span class="o">=</span><span class="nb">input</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
</code></pre>

<p>MaxPool2d is not invertible, as the locations of the max locations are lost.
MaxUnpool2d takes in as input the output of MaxPool2d and the indices of the Max locations
and computes the inverse.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the max window. Can be a single number k (for a square kernel of k x k) or a tuple (kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>kernel_size</td>
<td>the stride of the window. Can be a single number s or a tuple (sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit padding that was added to the input. Can be a single number or a tuple.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , *, * ]</td>
<td>Input is minibatch x channels x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , *, * ]</td>
<td>Output shape is minibatch x channels x padH x (iH - 1) * sH + kH x padW x (iW - 1) * sW + kW, or as specified to the call.</td>
</tr>
</tbody></table>

<h3 id="maxunpool3d">MaxUnpool3d</h3>

<p>Computes the inverse operation of MaxPool3d</p>
<pre class="highlight python"><code><span class="c"># pool of square window of size=3, stride=2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool3d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">return_indices</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">mu</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxUnpool3d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">input</span><span class="p">,</span> <span class="n">indices</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="n">unpooled_output</span> <span class="o">=</span> <span class="n">m2</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">indices</span><span class="p">)</span>
</code></pre>

<p>MaxPool3d is not invertible, as the locations of the max locations are lost.
MaxUnpool3d takes in as input the output of MaxPool3d and the indices of the Max locations
and computes the inverse.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the max window. Can be a single number k (for a square kernel of k x k) or a tuple (kt x kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>kernel_size</td>
<td>the stride of the window. Can be a single number s or a tuple (st x sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit padding that was added to the input. Can be a single number or a tuple.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , *, *, * ]</td>
<td>Input is minibatch x channels x iT x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , *, *, * ]</td>
<td>Output shape = minibatch x channels x padT x (iT - 1) * sT + kT x padH x (iH - 1) * sH + kH x padW x (iW - 1) * sW + kW</td>
</tr>
</tbody></table>

<h3 id="avgpool2d">AvgPool2d</h3>

<p>Applies a 2D average pooling over an input signal composed of several input</p>
<pre class="highlight python"><code><span class="n">The</span> <span class="n">output</span> <span class="n">value</span> <span class="n">of</span> <span class="n">the</span> <span class="n">layer</span> <span class="k">with</span> <span class="nb">input</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">C</span> <span class="n">x</span> <span class="n">H</span> <span class="n">x</span> <span class="n">W</span><span class="p">)</span> <span class="ow">and</span> <span class="n">output</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">C</span> <span class="n">x</span> <span class="n">oH</span> <span class="n">x</span> <span class="n">oW</span><span class="p">)</span>
<span class="n">can</span> <span class="n">be</span> <span class="n">precisely</span> <span class="n">described</span> <span class="k">as</span><span class="p">:</span>
<span class="n">output</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">c_i</span><span class="p">][</span><span class="n">h_i</span><span class="p">][</span><span class="n">w_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="n">K</span><span class="p">)</span> <span class="o">*</span> <span class="n">sum_</span><span class="p">{</span><span class="n">kh</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">KH</span><span class="p">}</span> <span class="n">sum_</span><span class="p">{</span><span class="n">kw</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">kW</span><span class="p">}</span>  <span class="nb">input</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">c_i</span><span class="p">][</span><span class="n">stride_h</span> <span class="o">*</span> <span class="n">h_i</span> <span class="o">+</span> <span class="n">kh</span><span class="p">)][</span><span class="n">stride_w</span> <span class="o">*</span> <span class="n">w_i</span> <span class="o">+</span> <span class="n">kw</span><span class="p">)]</span>
</code></pre>
<pre class="highlight python"><code><span class="c"># pool of square window of size=3, stride=2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">AvgPool2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># pool of non-square window</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">AvgPool2d</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the window. Can be a single number k (for a square kernel of k x k) or a tuple (kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>kernel_size</td>
<td>the stride of the window. Can be a single number s or a tuple (sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit padding to be added. Can be a single number or a tuple.</td>
</tr>
<tr>
<td>ceil_mode</td>
<td></td>
<td>when True, will use &ldquo;ceil&rdquo; instead of &ldquo;floor&rdquo; to compute the output shape</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , *, * ]</td>
<td>Input is minibatch x channels x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , *, * ]</td>
<td>Output shape = minibatch x channels x floor((iH  + 2*padH - kH) / sH + 1) x floor((iW  + 2*padW - kW) / sW + 1)</td>
</tr>
</tbody></table>

<h3 id="avgpool3d">AvgPool3d</h3>

<p>Applies a 3D average pooling over an input signal composed of several input</p>
<pre class="highlight python"><code><span class="c"># pool of square window of size=3, stride=2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">AvgPool3d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># pool of non-square window</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">AvgPool3d</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span> <span class="mi">31</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the window to take a average over. Can be a single number k (for a square kernel of k x k x k) or a tuple (kt x kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>kernel_size</td>
<td>the stride of the window. Can be a single number s or a tuple (st x sh x sw).</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , *, *, * ]</td>
<td>Input is minibatch x channels x iT x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , *, *, * ]</td>
<td>Output shape = minibatch x channels x floor((iT  + 2*padT - kT) / sT + 1) x floor((iH  + 2*padH - kH) / sH + 1) x floor((iW  + 2*padW - kW) / sW + 1)</td>
</tr>
</tbody></table>

<h3 id="fractionalmaxpool2d">FractionalMaxPool2d</h3>

<p>Applies a 2D fractional max pooling over an input signal composed of several input</p>
<pre class="highlight python"><code><span class="c"># pool of square window of size=3, and target output size 13x12</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">FractionalMaxPool2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">output_size</span><span class="o">=</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
<span class="c"># pool of square window and target output size being half of input image size</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">FractionalMaxPool2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">output_ratio</span><span class="o">=</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<p>Fractiona MaxPooling is described in detail in the paper <a href="http://arxiv.org/abs/1412.6071">&ldquo;Fractional Max-Pooling&rdquo; by Ben Graham</a>
The max-pooling operation is applied in kHxkW regions by a stochastic
step size determined by the target output size.
The number of output features is equal to the number of input planes.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the window to take a max over. Can be a single number k (for a square kernel of k x k) or a tuple (kh x kw)</td>
</tr>
<tr>
<td>output_size</td>
<td></td>
<td>the target output size of the image of the form oH x oW. Can be a tuple (oH, oW) or a single number oH for a square image oH x oH</td>
</tr>
<tr>
<td>output_ratio</td>
<td></td>
<td>If one wants to have an output size as a ratio of the input size, this option can be given. This has to be a number or tuple in the range (0, 1)</td>
</tr>
<tr>
<td>return_indices</td>
<td>False</td>
<td>if True, will return the indices along with the outputs. Useful to pass to nn.MaxUnpool2d .</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , *, * ]</td>
<td>Input is minibatch x channels x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , *, * ]</td>
<td>Output shape = minibatch x channels x floor((iH  + 2*padH - kH) / sH + 1) x floor((iW  + 2*padW - kW) / sW + 1)</td>
</tr>
</tbody></table>

<h3 id="lppool2d">LPPool2d</h3>

<p>Applies a 2D power-average pooling over an input signal composed of several input</p>
<pre class="highlight python"><code><span class="c"># power-2 pool of square window of size=3, stride=2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">LPPool2d</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># pool of non-square window of power 1.2</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">LPPool2d</span><span class="p">(</span><span class="mf">1.2</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.
On each window, the function computed is: f(X) = pow(sum(pow(X, p)), 1/p)
At p = infinity, one gets Max Pooling
At p = 1, one gets Average Pooling</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the window. Can be a single number k (for a square kernel of k x k) or a tuple (kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>kernel_size</td>
<td>the stride of the window. Can be a single number s or a tuple (sh x sw).</td>
</tr>
<tr>
<td>ceil_mode</td>
<td></td>
<td>when True, will use &ldquo;ceil&rdquo; instead of &ldquo;floor&rdquo; to compute the output shape</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , * , *, * ]</td>
<td>Input is minibatch x channels x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , * , *, * ]</td>
<td>Output shape = minibatch x channels x floor((iH  + 2*padH - kH) / sH + 1) x floor((iW  + 2*padW - kW) / sW + 1)</td>
</tr>
</tbody></table>
