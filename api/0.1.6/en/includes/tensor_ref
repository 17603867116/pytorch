<h1 id="torch-tensor">torch.Tensor</h1>

<h2 id="apply_">apply_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>apply_</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="element_size">element_size</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>element_size</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="index">index</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>index</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="map_">map_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>map_</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="map2_">map2_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>map2_</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="dim">dim</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>dim</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="new">new</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>new</td>
<td>no</td>
<td>IS_CUDA</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="nelement">nelement</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>nelement</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="select">select</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>select</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="set_index">set_index</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>set_index</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="size">size</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>size</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="storage">storage</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>storage</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="stride">stride</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>stride</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="numpy">numpy</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>numpy</td>
<td>no</td>
<td>Byte // Short // Int // Long // Float // Double</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="cat">cat</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cat</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>No Arguments</strong></p>

<p><strong>Returns        : nothing</strong></p>

<h2 id="abs">abs</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>abs  //  abs_</td>
<td>yes</td>
<td>Float // Double // Long // Int // Cuda_Float // Cuda_Half // Cuda_Double // Cuda_Int // Cuda_Long</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="acos">acos</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>acos  //  acos_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="add">add</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>add  //  add_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="addbmm">addbmm</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>addbmm  //  addbmm_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>beta</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>alpha</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>batch1</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>batch2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="addcdiv">addcdiv</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>addcdiv  //  addcdiv_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>tensor1</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>tensor2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="addcmul">addcmul</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>addcmul  //  addcmul_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>tensor1</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>tensor2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="addmm">addmm</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>addmm  //  addmm_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>beta</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>alpha</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>mat1</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>mat2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="addmv">addmv</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>addmv  //  addmv_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>beta</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>alpha</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>mat</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>vec</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="addr">addr</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>addr  //  addr_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>beta</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>alpha</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>vec1</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>vec2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="all">all</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>all</td>
<td>no</td>
<td>Byte // defined(THC_REAL_IS_BYTE)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : bool</strong></p>

<h2 id="any">any</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>any</td>
<td>no</td>
<td>Byte // defined(THC_REAL_IS_BYTE)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : bool</strong></p>

<h2 id="asin">asin</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>asin  //  asin_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="atan">atan</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>atan  //  atan_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="atan2">atan2</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>atan2  //  atan2_</td>
<td>no</td>
<td>Float // Double // Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>other</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="baddbmm">baddbmm</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>baddbmm  //  baddbmm_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>beta</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>alpha</td>
<td>real</td>
<td>1</td>
</tr>
<tr>
<td>batch1</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>batch2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="bernoulli_">bernoulli_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>bernoulli_</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>p</td>
<td>double</td>
<td>0.5</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="bmm">bmm</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>bmm</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>AS_REAL(0)</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>0</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>AS_REAL(1)</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>mat2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="cauchy_">cauchy_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cauchy_</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>location</td>
<td>double</td>
<td>0</td>
</tr>
<tr>
<td>scale</td>
<td>double</td>
<td>1</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="ceil">ceil</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>ceil  //  ceil_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="cinv">cinv</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cinv  //  cinv_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="clamp">clamp</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>clamp  //  clamp_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>min</td>
<td>real</td>
<td>[required]</td>
</tr>
<tr>
<td>max</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="clone">clone</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>clone</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : Tensor</strong></p>

<h2 id="cmax">cmax</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cmax  //  cmax_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>other</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="cmin">cmin</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cmin  //  cmin_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>other</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="contiguous">contiguous</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>contiguous</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : Tensor</strong></p>

<h2 id="cos">cos</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cos  //  cos_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="cosh">cosh</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cosh  //  cosh_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="cross">cross</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cross</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>other</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>-1</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="cumprod">cumprod</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cumprod</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="cumsum">cumsum</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>cumsum</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="data_ptr">data_ptr</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>data_ptr</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : void</strong>*</p>

<h2 id="diag">diag</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>diag</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>diagonal</td>
<td>long</td>
<td>0</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="dist">dist</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>dist</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>other</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>p</td>
<td>real</td>
<td>2</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="div">div</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>div  //  div_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="dot">dot</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>dot</td>
<td>yes</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half // All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>tensor</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : accreal</strong></p>

<h2 id="eig">eig</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>eig</td>
<td>no</td>
<td>Float // Double // Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>res1</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res2</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>eigenvectors</td>
<td>bool</td>
<td>N</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="eq">eq</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>eq  //  eq_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>ByteTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>tensor</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="equal">equal</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>equal</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>other</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : bool</strong></p>

<h2 id="exp">exp</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>exp  //  exp_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="exponential_">exponential_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>exponential_</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>lambd</td>
<td>double</td>
<td>1</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="eye">eye</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>eye</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>n</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>1</td>
<td>long</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="fill_">fill_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>fill_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="floor">floor</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>floor  //  floor_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="fmod">fmod</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>fmod  //  fmod_</td>
<td>yes</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="frac">frac</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>frac  //  frac_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="free">free</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>free</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="gather">gather</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>gather</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>index</td>
<td>LongTensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="ge">ge</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>ge  //  ge_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>ByteTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>tensor</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="gels">gels</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>gels</td>
<td>no</td>
<td>Float // Double // Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>res1</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res2</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>A</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="geometric_">geometric_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>geometric_</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>p</td>
<td>double</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="geqrf">geqrf</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>geqrf</td>
<td>no</td>
<td>Float // Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>res1</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res2</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="ger">ger</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>ger</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>AS_REAL(0)</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>0</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>AS_REAL(1)</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>vec2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="gesv">gesv</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>gesv</td>
<td>no</td>
<td>Float // Double // Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>solution</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>lu</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>A</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="get_device">get_device</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>get_device</td>
<td>no</td>
<td>IS_CUDA</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : long</strong></p>

<h2 id="gt">gt</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>gt  //  gt_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>ByteTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>tensor</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="histc">histc</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>histc</td>
<td>no</td>
<td>Float // Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>100</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>0</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>0</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="index_add_">index_add_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>index_add_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>index</td>
<td>LongTensor</td>
<td>[required]</td>
</tr>
<tr>
<td>source</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="index_copy_">index_copy_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>index_copy_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>index</td>
<td>LongTensor</td>
<td>[required]</td>
</tr>
<tr>
<td>source</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="index_fill_">index_fill_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>index_fill_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>index</td>
<td>LongTensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="index_select">index_select</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>index_select</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>index</td>
<td>LongTensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="inverse">inverse</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>inverse</td>
<td>no</td>
<td>Float // Double // Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>output</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="is_contiguous">is_contiguous</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>is_contiguous</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : bool</strong></p>

<h2 id="is_same_size">is_same_size</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>is_same_size</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>other</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : bool</strong></p>

<h2 id="is_set_to">is_set_to</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>is_set_to</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>tensor</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : bool</strong></p>

<h2 id="kthvalue">kthvalue</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>kthvalue</td>
<td>yes</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>values</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>indices</td>
<td>LongTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>k</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>_<em>last</em>dim</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="le">le</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>le  //  le_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>ByteTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>tensor</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="lerp">lerp</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>lerp  //  lerp_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>end</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>weight</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="linspace">linspace</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>linspace</td>
<td>no</td>
<td>Float // Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>start</td>
<td>real</td>
<td>[required]</td>
</tr>
<tr>
<td>end</td>
<td>real</td>
<td>[required]</td>
</tr>
<tr>
<td>steps</td>
<td>long</td>
<td>100</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="log">log</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>log  //  log_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="log1p">log1p</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>log1p  //  log1p_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="log_normal_">log_normal_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>log_normal_</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>location</td>
<td>double</td>
<td>1</td>
</tr>
<tr>
<td>scale</td>
<td>double</td>
<td>2</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="logspace">logspace</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>logspace</td>
<td>no</td>
<td>Float // Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>start</td>
<td>real</td>
<td>[required]</td>
</tr>
<tr>
<td>end</td>
<td>real</td>
<td>[required]</td>
</tr>
<tr>
<td>steps</td>
<td>long</td>
<td>100</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="lt">lt</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>lt  //  lt_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>ByteTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>tensor</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="masked_copy_">masked_copy_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>masked_copy_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>mask</td>
<td>ByteTensor</td>
<td>[required]</td>
</tr>
<tr>
<td>source</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="masked_fill_">masked_fill_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>masked_fill_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>mask</td>
<td>ByteTensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="masked_select">masked_select</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>masked_select</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>mask</td>
<td>ByteTensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="max">max</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>max</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="mean">mean</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>mean</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="median">median</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>median</td>
<td>yes</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>values</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>indices</td>
<td>LongTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>_<em>last</em>dim</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="min">min</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>min</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="mm">mm</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>mm</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>AS_REAL(0)</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>0</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>AS_REAL(1)</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>mat2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="mode">mode</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>mode</td>
<td>yes</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>values</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>indices</td>
<td>LongTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>_<em>last</em>dim</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="mul">mul</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>mul  //  mul_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="multinomial">multinomial</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>multinomial</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>num_samples</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>replacement</td>
<td>bool</td>
<td>false</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="mv">mv</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>mv</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>AS_REAL(0)</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>0</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>AS_REAL(1)</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>vec</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="ndimension">ndimension</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>ndimension</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : long</strong></p>

<h2 id="narrow">narrow</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>narrow</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dimension</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>start</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>length</td>
<td>long</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="ne">ne</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>ne  //  ne_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>ByteTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>tensor</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="neg">neg</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>neg  //  neg_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="nonzero">nonzero</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>nonzero</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>LongTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="norm">norm</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>norm</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>p</td>
<td>real</td>
<td>2</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="normal_">normal_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>normal_</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>mean</td>
<td>double</td>
<td>0</td>
</tr>
<tr>
<td>var</td>
<td>double</td>
<td>1</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="numel">numel</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>numel</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : long</strong></p>

<h2 id="ones">ones</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>ones  //  ones_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>size</td>
<td>THSize*</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="orgqr">orgqr</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>orgqr</td>
<td>no</td>
<td>Float // Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>input2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="ormqr">ormqr</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>ormqr</td>
<td>no</td>
<td>Float // Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>input2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>input3</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>left</td>
<td>bool</td>
<td>L</td>
</tr>
<tr>
<td>transpose</td>
<td>bool</td>
<td>N</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="potrf">potrf</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>potrf</td>
<td>no</td>
<td>Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>output</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="potri">potri</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>potri</td>
<td>no</td>
<td>Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>output</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="potrs">potrs</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>potrs</td>
<td>no</td>
<td>Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>input2</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="pow">pow</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>pow  //  pow_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>exponent</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="prod">prod</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>prod</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="pstrf">pstrf</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>pstrf</td>
<td>no</td>
<td>Float // Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>res1</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res2</td>
<td>THIntTensor*</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>upper</td>
<td>bool</td>
<td>U</td>
</tr>
<tr>
<td>tol</td>
<td>real</td>
<td>-1</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="qr">qr</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>qr</td>
<td>no</td>
<td>Float // Double // Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>res1</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res2</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="rand">rand</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>rand</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>size</td>
<td>THSize*</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="randn">randn</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>randn</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>size</td>
<td>THSize*</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="random_">random_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>random_</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="randperm">randperm</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>randperm</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>n</td>
<td>long</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="range">range</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>range</td>
<td>no</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>xmin</td>
<td>accreal</td>
<td>[required]</td>
</tr>
<tr>
<td>xmax</td>
<td>accreal</td>
<td>[required]</td>
</tr>
<tr>
<td>step</td>
<td>accreal</td>
<td>1</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="remainder">remainder</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>remainder  //  remainder_</td>
<td>yes</td>
<td>All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="renorm">renorm</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>renorm  //  renorm_</td>
<td>no</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>p</td>
<td>real</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>maxnorm</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="resize_as_">resize_as_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>resize_as_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>template</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="resize_">resize_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>resize_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>size</td>
<td>THSize*</td>
<td>[required]</td>
</tr>
<tr>
<td>NULL</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="retain">retain</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>retain</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="round">round</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>round  //  round_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="rsqrt">rsqrt</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>rsqrt  //  rsqrt_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="scatter_">scatter_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>scatter_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>index</td>
<td>LongTensor</td>
<td>[required]</td>
</tr>
<tr>
<td>src</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="set_">set_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>set_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>source</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="sigmoid">sigmoid</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>sigmoid  //  sigmoid_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="sign">sign</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>sign  //  sign_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="sin">sin</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>sin  //  sin_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="sinh">sinh</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>sinh  //  sinh_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="sort">sort</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>sort</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>values</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>indices</td>
<td>LongTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>_<em>last</em>dim</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>false</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="sqrt">sqrt</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>sqrt  //  sqrt_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="squeeze">squeeze</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>squeeze  //  squeeze_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="std">std</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>std</td>
<td>no</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="storage_offset">storage_offset</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>storage_offset</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : long</strong></p>

<h2 id="sub">sub</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>sub  //  sub_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>value</td>
<td>real</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="sum">sum</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>sum</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="svd">svd</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>svd</td>
<td>no</td>
<td>Float // Double // Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>res1</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res2</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res3</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>some</td>
<td>bool</td>
<td>S</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1,2</strong></p>

<h2 id="symeig">symeig</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>symeig</td>
<td>no</td>
<td>Float // Double // Cuda_Float</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>res1</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res2</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>eigenvectors</td>
<td>bool</td>
<td>N</td>
</tr>
<tr>
<td>upper</td>
<td>bool</td>
<td>U</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="t">t</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>t  //  t_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>0</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>1</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : Tensor</strong></p>

<h2 id="tan">tan</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>tan  //  tan_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="tanh">tanh</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>tanh  //  tanh_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="topk">topk</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>topk</td>
<td>yes</td>
<td>Cuda_Float // All CPU Types</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>values</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>indices</td>
<td>LongTensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>k</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>_<em>last</em>dim</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>false</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
<tr>
<td>false</td>
<td>CONSTANT</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="trace">trace</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>trace</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : accreal</strong></p>

<h2 id="transpose">transpose</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>transpose  //  transpose_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dim0</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>dim1</td>
<td>long</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : Tensor</strong></p>

<h2 id="tril">tril</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>tril  //  tril_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>k</td>
<td>long</td>
<td>0</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="triu">triu</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>triu  //  triu_</td>
<td>yes</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>destination</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>k</td>
<td>long</td>
<td>0</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="trtrs">trtrs</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>trtrs</td>
<td>no</td>
<td>Float // Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>res1</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>res2</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>A</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>upper</td>
<td>bool</td>
<td>U</td>
</tr>
<tr>
<td>transpose</td>
<td>bool</td>
<td>N</td>
</tr>
<tr>
<td>unitriangular</td>
<td>bool</td>
<td>N</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0,1</strong></p>

<h2 id="trunc">trunc</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>trunc  //  trunc_</td>
<td>yes</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="unfold">unfold</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>unfold</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>dimension</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>size</td>
<td>long</td>
<td>[required]</td>
</tr>
<tr>
<td>step</td>
<td>long</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>

<h2 id="uniform_">uniform_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>uniform_</td>
<td>no</td>
<td>Cuda_Float // Cuda_Double // Cuda_Half</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
<tr>
<td>from</td>
<td>double</td>
<td>0</td>
</tr>
<tr>
<td>to</td>
<td>double</td>
<td>1</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="var">var</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>var</td>
<td>no</td>
<td>Float // Double // Cuda_Float // Cuda_Half // Cuda_Double</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : nothing</strong></p>

<h2 id="zero_">zero_</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>zero_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>self</td>
<td>Tensor</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : self</strong></p>

<h2 id="zeros">zeros</h2>

<table><thead>
<tr>
<th>Name</th>
<th>Autograd</th>
<th>defined if</th>
</tr>
</thead><tbody>
<tr>
<td>zeros  //  zeros_</td>
<td>no</td>
<td>All Types (CPU and CUDA)</td>
</tr>
</tbody></table>

<p><strong>Arguments</strong></p>

<table><thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>result</td>
<td>Tensor</td>
<td>[optional]</td>
</tr>
<tr>
<td>size</td>
<td>THSize*</td>
<td>[required]</td>
</tr>
</tbody></table>

<p><strong>Returns        : argument 0</strong></p>
