<h2 id="convolution-layers">Convolution Layers</h2>

<h3 id="conv1d">Conv1d</h3>

<p>Applies a 1D convolution over an input signal composed of several input</p>
<pre class="highlight python"><code><span class="n">The</span> <span class="n">output</span> <span class="n">value</span> <span class="n">of</span> <span class="n">the</span> <span class="n">layer</span> <span class="k">with</span> <span class="nb">input</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">iC</span> <span class="n">x</span> <span class="n">W</span><span class="p">)</span> <span class="ow">and</span> <span class="n">output</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">oC</span> <span class="n">x</span> <span class="n">oW</span><span class="p">)</span>
<span class="n">can</span> <span class="n">be</span> <span class="n">precisely</span> <span class="n">described</span> <span class="k">as</span><span class="p">:</span>
<span class="n">output</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">oc_i</span><span class="p">][</span><span class="n">w_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">bias</span><span class="p">[</span><span class="n">oc_i</span><span class="p">]</span>
            <span class="o">+</span> <span class="n">sum_iC</span> <span class="n">sum_</span><span class="p">{</span><span class="n">ow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oW</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span> <span class="n">sum_</span><span class="p">{</span><span class="n">kw</span> <span class="o">=</span> <span class="mi">0</span> <span class="n">to</span> <span class="n">kW</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span>
                <span class="n">weight</span><span class="p">[</span><span class="n">oc_i</span><span class="p">][</span><span class="n">ic_i</span><span class="p">][</span><span class="n">kw</span><span class="p">]</span> <span class="o">*</span> <span class="nb">input</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">ic_i</span><span class="p">][</span><span class="n">stride_w</span> <span class="o">*</span> <span class="n">ow</span> <span class="o">+</span> <span class="n">kw</span><span class="p">)]</span>
</code></pre>
<pre class="highlight python"><code><span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv1d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<p>Note that depending of the size of your kernel, several (of the last)
columns of the input might be lost. It is up to the user
to add proper padding.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>in_channels</td>
<td></td>
<td>The number of expected input channels in the image given as input</td>
</tr>
<tr>
<td>out_channels</td>
<td></td>
<td>The number of output channels the convolution layer will produce</td>
</tr>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the convolving kernel.</td>
</tr>
<tr>
<td>stride</td>
<td></td>
<td>the stride of the convolving kernel.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , in_channels  , * ]</td>
<td>Input is minibatch x in_channels x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , out_channels , * ]</td>
<td>Output shape is precisely minibatch x out_channels x floor((iW  + 2*padW - kW) / dW + 1)</td>
</tr>
</tbody></table>

<h4 id="members">Members</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>weight</td>
<td>the learnable weights of the module of shape (out_channels x in_channels x kW)</td>
</tr>
<tr>
<td>bias</td>
<td>the learnable bias of the module of shape (out_channels)</td>
</tr>
</tbody></table>

<h3 id="conv2d">Conv2d</h3>

<p>Applies a 2D convolution over an input image composed of several input</p>
<pre class="highlight python"><code><span class="n">The</span> <span class="n">output</span> <span class="n">value</span> <span class="n">of</span> <span class="n">the</span> <span class="n">layer</span> <span class="k">with</span> <span class="nb">input</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">iC</span> <span class="n">x</span> <span class="n">H</span> <span class="n">x</span> <span class="n">W</span><span class="p">)</span> <span class="ow">and</span> <span class="n">output</span> <span class="p">(</span><span class="n">b</span> <span class="n">x</span> <span class="n">oC</span> <span class="n">x</span> <span class="n">oH</span> <span class="n">x</span> <span class="n">oW</span><span class="p">)</span>
<span class="n">can</span> <span class="n">be</span> <span class="n">precisely</span> <span class="n">described</span> <span class="k">as</span><span class="p">:</span>
<span class="n">output</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">oc_i</span><span class="p">][</span><span class="n">h_i</span><span class="p">][</span><span class="n">w_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">bias</span><span class="p">[</span><span class="n">oc_i</span><span class="p">]</span>
            <span class="o">+</span> <span class="n">sum_iC</span> <span class="n">sum_</span><span class="p">{</span><span class="n">oh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oH</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span> <span class="n">sum_</span><span class="p">{</span><span class="n">ow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">oW</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span> <span class="n">sum_</span><span class="p">{</span><span class="n">kh</span> <span class="o">=</span> <span class="mi">0</span> <span class="n">to</span> <span class="n">kH</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span> <span class="n">sum_</span><span class="p">{</span><span class="n">kw</span> <span class="o">=</span> <span class="mi">0</span> <span class="n">to</span> <span class="n">kW</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span>
                <span class="n">weight</span><span class="p">[</span><span class="n">oc_i</span><span class="p">][</span><span class="n">ic_i</span><span class="p">][</span><span class="n">kh</span><span class="p">][</span><span class="n">kw</span><span class="p">]</span> <span class="o">*</span> <span class="nb">input</span><span class="p">[</span><span class="n">b_i</span><span class="p">][</span><span class="n">ic_i</span><span class="p">][</span><span class="n">stride_h</span> <span class="o">*</span> <span class="n">oh</span> <span class="o">+</span> <span class="n">kh</span><span class="p">)][</span><span class="n">stride_w</span> <span class="o">*</span> <span class="n">ow</span> <span class="o">+</span> <span class="n">kw</span><span class="p">)]</span>
</code></pre>
<pre class="highlight python"><code><span class="c"># With square kernels and equal stride</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># non-square kernels and unequal stride and with padding</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="c"># non-square kernels and unequal stride and with padding and dilation</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">dilation</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<p>Note that depending of the size of your kernel, several (of the last)
columns or rows of the input image might be lost. It is up to the user
to add proper padding in images.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>in_channels</td>
<td></td>
<td>The number of expected input channels in the image given as input</td>
</tr>
<tr>
<td>out_channels</td>
<td></td>
<td>The number of output channels the convolution layer will produce</td>
</tr>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the convolving kernel. Can be a single number k (for a square kernel of k x k) or a tuple (kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>1</td>
<td>the stride of the convolving kernel. Can be a single number s or a tuple (sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit zero padding on the input. Can be a single number s or a tuple.</td>
</tr>
<tr>
<td>dilation</td>
<td>None</td>
<td>If given, will do dilated (or atrous) convolutions. Can be a single number s or a tuple.</td>
</tr>
<tr>
<td>bias</td>
<td>True</td>
<td>If set to False, the layer will not learn an additive bias.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , in_channels  , * , * ]</td>
<td>Input is minibatch x in_channels x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , out_channels , * , * ]</td>
<td>Output shape is precisely minibatch x out_channels x floor((iH  + 2*padH - kH) / dH + 1) x floor((iW  + 2*padW - kW) / dW + 1)</td>
</tr>
</tbody></table>

<h4 id="members">Members</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>weight</td>
<td>the learnable weights of the module of shape (out_channels x in_channels x kH x kW)</td>
</tr>
<tr>
<td>bias</td>
<td>the learnable bias of the module of shape (out_channels)</td>
</tr>
</tbody></table>

<h3 id="convtranspose2d">ConvTranspose2d</h3>

<p>Applies a 2D deconvolution operator over an input image composed of several input</p>
<pre class="highlight python"><code><span class="c"># With square kernels and equal stride</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ConvTranspose2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># non-square kernels and unequal stride and with padding</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ConvTranspose2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="c"># exact output size can be also specified as an argument</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">downsample</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">upsample</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ConvTranspose2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">h</span> <span class="o">=</span> <span class="n">downsample</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">upsample</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">output_size</span><span class="o">=</span><span class="nb">input</span><span class="o">.</span><span class="n">size</span><span class="p">())</span>
</code></pre>

<p>planes.
The deconvolution operator multiplies each input value element-wise by a learnable kernel,
and sums over the outputs from all input feature planes.
This module can be seen as the exact reverse of the Conv2d module.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>in_channels</td>
<td></td>
<td>The number of expected input channels in the image given as input</td>
</tr>
<tr>
<td>out_channels</td>
<td></td>
<td>The number of output channels the convolution layer will produce</td>
</tr>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the convolving kernel. Can be a single number k (for a square kernel of k x k) or a tuple (kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>1</td>
<td>the stride of the convolving kernel. Can be a single number or a tuple (sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit zero padding on the input. Can be a single number or a tuple.</td>
</tr>
<tr>
<td>output_padding</td>
<td>0</td>
<td>A zero-padding of 0 &lt;= padding &lt; stride that should be added to the output. Can be a single number or a tuple.</td>
</tr>
<tr>
<td>bias</td>
<td>True</td>
<td>If set to False, the layer will not learn an additive bias.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , in_channels  , * , * ]</td>
<td>Input is minibatch x in_channels x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , out_channels , * , * ]</td>
<td>Output shape is minibatch x out_channels x (iH - 1) * sH - 2*padH + kH + output_paddingH x (iW - 1) * sW - 2*padW + kW, or as specified in a second argument to the call.</td>
</tr>
</tbody></table>

<h4 id="members">Members</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>weight</td>
<td>the learnable weights of the module of shape (in_channels x out_channels x kH x kW)</td>
</tr>
<tr>
<td>bias</td>
<td>the learnable bias of the module of shape (out_channels)</td>
</tr>
</tbody></table>

<h3 id="conv3d">Conv3d</h3>

<p>Applies a 3D convolution over an input image composed of several input</p>
<pre class="highlight python"><code><span class="c"># With square kernels and equal stride</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv3d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># non-square kernels and unequal stride and with padding</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv3d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.</p>

<p>Note that depending of the size of your kernel, several (of the last)
columns or rows of the input image might be lost. It is up to the user
to add proper padding in images.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>in_channels</td>
<td></td>
<td>The number of expected input channels in the image given as input</td>
</tr>
<tr>
<td>out_channels</td>
<td></td>
<td>The number of output channels the convolution layer will produce</td>
</tr>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the convolving kernel. Can be a single number k (for a square kernel of k x k x k) or a tuple (kt x kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>1</td>
<td>the stride of the convolving kernel. Can be a single number s or a tuple (kt x sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit zero padding on the input. Can be a single number s or a tuple.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , in_channels  , * , * , * ]</td>
<td>Input is minibatch x in_channels x iT x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , out_channels , * , * , * ]</td>
<td>Output shape is precisely minibatch x out_channels x floor((iT  + 2*padT - kT) / dT + 1) x floor((iH  + 2*padH - kH) / dH + 1) x floor((iW  + 2*padW - kW) / dW + 1)</td>
</tr>
</tbody></table>

<h4 id="members">Members</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>weight</td>
<td>the learnable weights of the module of shape (out_channels x in_channels x kT x kH x kW)</td>
</tr>
<tr>
<td>bias</td>
<td>the learnable bias of the module of shape (out_channels)</td>
</tr>
</tbody></table>

<h3 id="convtranspose3d">ConvTranspose3d</h3>

<p>Applies a 3D deconvolution operator over an input image composed of several input</p>
<pre class="highlight python"><code><span class="c"># With square kernels and equal stride</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">ConvTranspose3d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="c"># non-square kernels and unequal stride and with padding</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Conv3d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">autograd</span><span class="o">.</span><span class="n">Variable</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">m</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
</code></pre>

<p>planes.
The deconvolution operator multiplies each input value element-wise by a learnable kernel,
and sums over the outputs from all input feature planes.
This module can be seen as the exact reverse of the Conv3d module.</p>

<h4 id="constructor-arguments">Constructor Arguments</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>in_channels</td>
<td></td>
<td>The number of expected input channels in the image given as input</td>
</tr>
<tr>
<td>out_channels</td>
<td></td>
<td>The number of output channels the convolution layer will produce</td>
</tr>
<tr>
<td>kernel_size</td>
<td></td>
<td>the size of the convolving kernel. Can be a single number k (for a square kernel of k x k x k) or a tuple (kt x kh x kw)</td>
</tr>
<tr>
<td>stride</td>
<td>1</td>
<td>the stride of the convolving kernel. Can be a single number or a tuple (st x sh x sw).</td>
</tr>
<tr>
<td>padding</td>
<td>0</td>
<td>implicit zero padding on the input. Can be a single number or a tuple.</td>
</tr>
<tr>
<td>output_padding</td>
<td>0</td>
<td>A zero-padding of 0 &lt;= padding &lt; stride that should be added to the output. Can be a single number or a tuple.</td>
</tr>
</tbody></table>

<h4 id="expected-shape">Expected Shape</h4>

<table><thead>
<tr>
<th></th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>input</td>
<td>[ * , in_channels  , * , * , * ]</td>
<td>Input is minibatch x in_channels x iH x iW</td>
</tr>
<tr>
<td>output</td>
<td>[ * , out_channels , * , * , * ]</td>
<td>Output shape is precisely minibatch x out_channels x (iT - 1) * sT - 2*padT + kT + output_paddingT x (iH - 1) * sH - 2*padH + kH + output_paddingH x (iW - 1) * sW - 2*padW + kW</td>
</tr>
</tbody></table>

<h4 id="members">Members</h4>

<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>weight</td>
<td>the learnable weights of the module of shape (in_channels x out_channels x kT x kH x kW)</td>
</tr>
<tr>
<td>bias</td>
<td>the learnable bias of the module of shape (out_channels)</td>
</tr>
</tbody></table>
